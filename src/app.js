import { Bot, InlineKeyboard } from "grammy";
import { ENV } from "./config/env";
import { Menu } from "@grammyjs/menu";
import express from "express";

import cors from "cors";
import bodyParser from "body-parser";

import { TARIFF_TYPE, QUESTIONS_TYPE } from "./store/tariff/constants";
import { tariffStore } from "./store";
import {
  FAQ_REGEX,
  MESSAGE_TEXT_SELECT_TARIFF,
  PROFILE_REGEX,
  RATE_REGEX,
  SUPPORT_REGEX,
  TEXT_FAQ_MESSAGE,
  WELCOME_MESSAGE,
} from "./constants";
import { CONFIG_TEXT_TARIFF, TEXT_QUESTIONS } from "./store/tariff/configText";

const BOT_TOKEN = ENV.BOT_TOKEN;

const bot = new Bot(BOT_TOKEN);
const app = express();
// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å cors
app.use(cors());
app.use(express.json());
// –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ POST
app.use(bodyParser.json());

const port = process.env.PORT || 3000;

app.listen(port, async () => {
  try {
    const menuTariff = new Menu("menu-tarif")
      .submenu("üíµ 1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ", "menu-payment", (ctx) =>
        handleTariff(ctx, TARIFF_TYPE.ONE_MONTH)
      )
      .row()
      .submenu("üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 799‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 12%)", "menu-payment", (ctx) =>
        handleTariff(ctx, TARIFF_TYPE.THREE_MONTH)
      )
      .row()
      .submenu(
        "üèÜ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2999‚ÇΩ (–≤—ã–≥–æ–¥–∞ 20% + 2 –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!)",
        "menu-payment",
        (ctx) => handleTariff(ctx, TARIFF_TYPE.ONE_YEAR)
      );
    const menuPayment = new Menu("menu-payment")
      .text("üá∑üá∫ –ö–ê–†–¢–ê –†–§", (ctx) => handlePayment(ctx))
      .row()
      .text("üí∞ –Æ–ö–∞—Å—Å–∞", (ctx) => handlePayment(ctx))
      .row()
      .text("üí≥ –°–ë–ü", (ctx) => handlePayment(ctx))
      .row()
      .submenu("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu-tarif", (ctx) => handleBackTariffPlan(ctx));

    const menuQuestions = new Menu("menu-questions")
      .submenu(
        "‚ùì –ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Å–∫–∞–Ω–µ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤?",
        "menu-answer-questions",
        (ctx) => handleQuestions(ctx, QUESTIONS_TYPE.SCANNER)
      )
      .row()
      .submenu("‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä—É–∑?", "menu-answer-questions", (ctx) =>
        handleQuestions(ctx, QUESTIONS_TYPE.LOAD)
      )
      .row()
      .submenu(
        "‚ùì –î—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤",
        "menu-answer-questions",
        (ctx) => handleQuestions(ctx, QUESTIONS_TYPE.OTHER_COEFF)
      );

    const menuAnswerQuestions = new Menu("menu-answer-questions")
      .submenu("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "menu-tarif", (ctx) =>
        handleBackTariffPlan(ctx)
      )
      .row()
      .submenu("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu-questions", (ctx) => handleBackQuestions(ctx));

    menuQuestions.register(menuAnswerQuestions);
    menuTariff.register([menuPayment, menuAnswerQuestions]);
    bot.use(menuTariff);
    bot.use(menuQuestions);

    // –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é
    bot.api.setMyCommands([
      {
        command: "start",
        description: "–°—Ç–∞—Ä—Ç –±–æ—Ç–∞",
      },
      {
        command: "tariff",
        description: "üî• –¢–∞—Ä–∏—Ñ—ã",
      },
      {
        command: "profile",
        description: "üì≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
      },
      {
        command: "faq",
        description: "‚ùîFAQ",
      },
      {
        command: "support",
        description: "üí¨ –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      },
    ]);

    bot.command("start", async (ctx) => {
      // // –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ textarea
      const keyboard = [
        [{ text: "üî• –¢–∞—Ä–∏—Ñ—ã" }],
        [{ text: "üì≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" }],
        [{ text: "‚ùîFAQ" }],
        [{ text: "üí¨ –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞" }],
      ];

      await ctx.reply(WELCOME_MESSAGE, {
        parse_mode: "Markdown",
        reply_markup: {
          keyboard,
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    bot.hears(/tariff|profile|faq|support/, async (ctx) => {
      switch (ctx.match[0]) {
        case "tariff": {
          const messageText = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤:";

          await ctx.reply(messageText, { reply_markup: menuTariff });

          break;
        }

        case "profile": {
          await handleProfile(ctx);
          break;
        }

        case "faq": {
          await ctx.reply(TEXT_FAQ_MESSAGE, {
            reply_markup: menuQuestions,
          });

          break;
        }

        case "support": {
          await handleSupport(ctx);
          break;
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    bot.on("message", handleMainMessage);
    bot.start();

    async function handleTariff(ctx, typeTariff = TARIFF_TYPE.ONE_MONTH) {
      tariffStore.tariff = typeTariff;
      const messageText = CONFIG_TEXT_TARIFF[typeTariff];
      await ctx.editMessageText(messageText);
    }

    async function handleBackTariffPlan(ctx) {
      await ctx.editMessageText(MESSAGE_TEXT_SELECT_TARIFF);
    }

    async function handleBackQuestions(ctx) {
      await ctx.editMessageText(TEXT_FAQ_MESSAGE);
    }

    async function handleProfile(ctx) {
      await ctx.reply("Profile");
    }

    async function handleQuestions(ctx, typeAnswer = QUESTIONS_TYPE.SCANNER) {
      const messageText = TEXT_QUESTIONS[typeAnswer];
      await ctx.editMessageText(messageText);
    }

    async function handleSupport(ctx) {
      await ctx.reply("Support", { reply_markup: menuTime });
    }

    async function handlePayment(ctx) {
      await ctx.reply("Payment");
    }

    async function handleMainMessage(ctx) {
      const messageUser = ctx?.message?.text;

      if (RATE_REGEX.test(messageUser)) {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.reply(MESSAGE_TEXT_SELECT_TARIFF, {
          reply_markup: menuTariff,
        });

        return;
      }

      if (FAQ_REGEX.test(messageUser)) {
        await ctx.reply("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", {
          reply_markup: menuQuestions,
        });

        return;
      }

      if (PROFILE_REGEX.test(messageUser)) {
        const messageText = "PROFILE";
        await ctx.reply(messageText);

        return;
      }

      if (SUPPORT_REGEX.test(messageUser)) {
        const messageText = "SUPPORT";
        await ctx.reply(messageText);

        return;
      }

      await ctx.reply(
        "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –≤–Ω–∏–∑—É –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –º–µ–Ω—é —Å–ª–µ–≤–∞"
      );
    }
    // const resJson = await fetch(
    //   "https://parser-api.com/parser/gibdd_api/?key=186ef6af388f5c660fe2c97007f8960f&vin=WP0ZZZ98ZRS272224&types=history,dtp,wanted,restrict",
    //   // "https://fit-hub-team.ru/api/proteins",
    //   {
    //     method: "GET",
    //     headers: {
    //       "Content-Type": "application/json",
    //     },
    //   }
    // );
    // const result = await resJson.json();
    // console.log(result);

    console.log(`Server listening on port ${port}`);
  } catch (error) {
    console.log("Error app", error);
  }
});
