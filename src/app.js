import { Bot } from "grammy";
import { ENV } from "./config/env";
import { Menu } from "@grammyjs/menu";
import express from "express";

import cors from "cors";
import bodyParser from "body-parser";

import { COMMAND_TYPE } from "./store/tariff/constants";
import { tariffStore } from "./store";
import {
  FAQ_REGEX,
  MESSAGE_TEXT_SELECT_TARIFF,
  PROFILE_REGEX,
  RATE_REGEX,
  SUPPORT_REGEX,
} from "./constants";
import { CONFIG_TEXT_TARIFF } from "./store/tariff/configText";

const BOT_TOKEN = ENV.BOT_TOKEN;

const bot = new Bot(BOT_TOKEN);
const app = express();
// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å cors
app.use(cors());
// –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ POST
app.use(bodyParser.json());
const port = process.env.PORT || 3000;

app.listen(port, async () => {
  try {
    const menuTariff = new Menu("menu-tarif")
      .submenu("üíµ 1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ", "menu-payment", (ctx) =>
        handleTariff(ctx, COMMAND_TYPE.ONE_MONTH)
      )
      .row()
      .submenu("üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 799‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 12%)", "menu-payment", (ctx) =>
        handleTariff(ctx, COMMAND_TYPE.THREE_MONTH)
      )
      .row()
      .submenu(
        "üèÜ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2999‚ÇΩ (–≤—ã–≥–æ–¥–∞ 20% + 2 –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!)",
        "menu-payment",
        (ctx) => handleTariff(ctx, COMMAND_TYPE.ONE_YEAR)
      );
    const menuPayment = new Menu("menu-payment")
      .text("üá∑üá∫ –ö–ê–†–¢–ê –†–§", (ctx) => handlePayment(ctx))
      .row()
      .text("üí∞ –Æ–ö–∞—Å—Å–∞", (ctx) => handlePayment(ctx))
      .row()
      .text("üí≥ –°–ë–ü", (ctx) => handlePayment(ctx))
      .row()
      .submenu("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu-tarif", (ctx) => handleBackTariffPlan(ctx));

    menuTariff.register(menuPayment);
    bot.use(menuTariff);

    // –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é
    bot.api.setMyCommands([
      {
        command: "start",
        description: "–°—Ç–∞—Ä—Ç –±–æ—Ç–∞",
      },
      {
        command: "tariff",
        description: "üî• –¢–∞—Ä–∏—Ñ—ã",
      },
      {
        command: "profile",
        description: "üì≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
      },
      {
        command: "faq",
        description: "‚ùîFAQ",
      },
      {
        command: "support",
        description: "üí¨ –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      },
    ]);

    bot.command("start", async (ctx) => {
      const messageText = `‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FootyPulse!
      –í–∞—à –∫–ª—é—á –∫ –≤—ã–≥–æ–¥–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º –Ω–∞ —Ñ—É—Ç–±–æ–ª!

      üîç –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?
      FootyPulse –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –º–∞—Ç—á–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–∏–Ω–∏—è—Ö –±—É–∫–º–µ–∫–µ—Ä–æ–≤ –∏ –¥–µ–ª–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –ú—ã –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≥—Ä—É–∑—ã ‚Äî –∏ –¥–∞–µ–º –≤–∞–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –±—É–∫–º–µ–∫–µ—Ä–∞–º–∏!

      üíé –ß—Ç–æ –¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?

      üì¨ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: –¢–æ–ø-5 –º–∞—Ç—á–µ–π –¥–Ω—è —Å —Å–∞–º—ã–º–∏ —Ä–µ–∑–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.

      –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ.

      üí∞ –¢–∞—Ä–∏—Ñ—ã:

      üíµ 1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ
      –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞:

      üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 799‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 12%)
      –í—ã–≥–æ–¥–Ω–µ–µ –Ω–∞ 100‚ÇΩ –≤ –º–µ—Å—è—Ü:
      ‚Äî –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º.
      ‚Äî –ú–µ–Ω—å—à–µ –ø–µ—Ä–µ–ø–ª–∞—Ç ‚Äî –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

      üèÜ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2999‚ÇΩ (–≤—ã–≥–æ–¥–∞ 20% + 2 –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!)
      –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤:
      ‚Äî –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ 10 –º–µ—Å—è—Ü–µ–≤.
      ‚Äî –ë–æ–Ω—É—Å–Ω—ã–µ 14 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π!

      üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å?

      –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º –Ω–∏–∂–µ.

      –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.

      –ü–æ–ª—É—á–∞–π—Ç–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö!
`;

      // // –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ textarea
      const keyboard = [
        [{ text: "üî• –¢–∞—Ä–∏—Ñ—ã" }],
        [{ text: "üì≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" }],
        [{ text: "‚ùîFAQ" }],
        [{ text: "üí¨ –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞" }],
      ];

      await ctx.reply(messageText, {
        parse_mode: "Markdown",
        reply_markup: {
          keyboard,
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    bot.hears(/tariff|profile|faq|support/, async (ctx) => {
      switch (ctx.match[0]) {
        case "tariff": {
          const messageText = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤:";

          await ctx.reply(messageText, { reply_markup: menuTariff });

          break;
        }

        case "profile": {
          await handleProfile(ctx);
          break;
        }

        case "faq": {
          await handleQuestions(ctx);
          break;
        }

        case "support": {
          await handleSupport(ctx);
          break;
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    bot.on("message", handleMainMessage);
    bot.start();

    async function handleTariff(ctx, typeTariff = COMMAND_TYPE.ONE_MONTH) {
      console.log(typeTariff, 5454545);

      // await ctx.reply("messageText", { reply_markup: menuPayment });
      return (async () => {
        tariffStore.tariff = typeTariff;
        const messageText = CONFIG_TEXT_TARIFF[typeTariff];
        await ctx.editMessageText(messageText);
      })();
    }

    async function handleBackTariffPlan(ctx) {
      return (async () => {
        await ctx.editMessageText(MESSAGE_TEXT_SELECT_TARIFF);
      })();
    }

    async function handleProfile(ctx) {
      await ctx.reply("Profile");
    }

    async function handleQuestions(ctx) {
      await ctx.reply("Questions");
    }

    async function handleSupport(ctx) {
      await ctx.reply("Support", { reply_markup: menuTime });
    }

    async function handlePayment(ctx) {
      await ctx.reply("Payment");
    }

    async function handleMainMessage(ctx) {
      const messageUser = ctx?.message?.text;

      if (RATE_REGEX.test(messageUser)) {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.reply(MESSAGE_TEXT_SELECT_TARIFF, {
          reply_markup: menuTariff,
        });
      }

      if (FAQ_REGEX.test(messageUser)) {
        const messageText = "FAQ";

        await ctx.reply(messageText);
      }

      if (PROFILE_REGEX.test(messageUser)) {
        const messageText = "PROFILE";

        await ctx.reply(messageText);
      }

      if (SUPPORT_REGEX.test(messageUser)) {
        const messageText = "SUPPORT";

        await ctx.reply(messageText);
      }
    }
    // const resJson = await fetch(
    //   "https://parser-api.com/parser/gibdd_api/?key=186ef6af388f5c660fe2c97007f8960f&vin=WP0ZZZ98ZRS272224&types=history,dtp,wanted,restrict",
    //   // "https://fit-hub-team.ru/api/proteins",
    //   {
    //     method: "GET",
    //     headers: {
    //       "Content-Type": "application/json",
    //     },
    //   }
    // );
    // const result = await resJson.json();
    // console.log(result);

    console.log(`Server listening on port ${port}`);
  } catch (error) {
    console.log("Error app", error);
  }
});
